#!/bin/bash
#
# Read/Set battery modes in lenovo ideapad 15ACH6 using acpi_call kernel module

## Usage: ig3mngr [OPTION] MODE
## Options:
##	-h, --help		usage help
##	-s, --set		set battery mode
##	-sc, --set-charge	set charge mode
## Battery modes:
##	0	Intelligent Cooling
##	1	Extreme Performance
##	2	Battery Saving	
##	
## Charge modes:
##	r1	Rapid Charge On
##	r0	Rapid Charge Off
##	b1	Battery Conservation On
##	b0	Battery Conservation Off		
##
## Examples:
## 	ig3mngr -s 1
##	ig3mngr -sc b1
##	ig3mngr -s 0 -sc r0 


#######################################
# Print error messages to STDERR.
# Globals:
#   None
# Arguments:
#   Error message
# Outputs:
#   Writes error message to STDERR
#######################################
err(){
  echo "$*" >&2
}

#######################################
# Print usage message.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes usage message to STDOUT
#######################################
usage(){
	printf '%s\n'\
	""\
	"Usage: ig3mngr [OPTION...] MODE"\
	"Options:"\
	"        -h, --help             usage help"\
	"        -s, --set              set battery mode"\
	"        -sc, --set-charge      set charge mode"\
	"Battery Modes:"\
	"        0       Intelligent Cooling"\
	"        1        Extreme Performance"\
	"        2        Battery Saving"\
	"Charge modes:"\
	"        r1       Rapid Charge On"\
	"        r0       Rapid Charge Off"\
	"        b1       Battery Conservation On"\
	"        b0       Battery Conservation Off"\
	"Note: turning Rapid Charge will disable Battery Conservation and vice-versa."\
	"Examples:"\
	"        ig3mngr -s 0"\
	"        ig3mngr -sc b1"\
	"        ig3mngr -sc b1 -r 0"
}

#######################################
# Handle error messages and calls err function to print these.
# Globals:
#   None
# Arguments:
#   Error code
# Outputs:
#   None
#######################################
function error(){
	case $1 in

		0)
			err "Please provide a valid battery mode to set (only 0, 1 and 2 are valid values)"
			usage
		;;
		
		1)
			err "Please provide a valid battery charge mode to set (only b0, b1, r0 and r1 are valid values)"
			usage
		;;

		2)
			err "Can't update the battery mode, please retry"
		;;
		
		3)
			err "Can't update the battery charge mode, please retry"
		;;
		
		4)
			err "Unrecognized battery mode, please retry"
		;;
		
		5)
			err "Unrecognized battery charge mode, please retry"
		;;

		7)
			err "Unrecognized operation"
			usage
		;;

		8)
			err "Help called!"
			usage
		;;
		
		9)
			err "Unexpected error"
		;;
		
		10) 	
			err "Please invoke this script using sudo"
		;;

		*)
			err "Unknown error"
		;;
	esac
	read_charge_operation
	read_operation
	exit 1
}

#######################################
# Check if the script is called using sudo.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
function check_sudo(){
	if (( $(id -u) != 0 )); then
		error 10
	fi;
}

#######################################
# Mount acpi_call module.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
function setup(){
	modprobe acpi_call
}

#######################################
# Reads the current mode and check if 
# it's equal to the expected one.
# Globals:
#   None
# Arguments:
#   Expected mode code
# Outputs:
#   None
#######################################
function check_mode(){
	echo '\_SB.PCI0.LPC0.EC0.GZ44' > /proc/acpi/call
	check=$(cat /proc/acpi/call | cut -d '' -f1)

	if ! (( $check == $1 )); then
		error 2
	fi
}

#######################################
# Reads the current charge mode and 
# check if it's equal to the expected one.
# Globals:
#   None
# Arguments:
#   Mode to check (0 = Rapid Charge, 1 = Battery conservation)
#   Expected mode code
# Outputs:
#   None
#######################################
function check_charge_mode(){
	# if we are checking rapid charge mode
	if (( $1 == 0 )); then
		echo '\_SB.PCI0.LPC0.EC0.FCGM' > /proc/acpi/call
		check=$(cat /proc/acpi/call | cut -d '' -f1)
		
	# if we are checking battery conservation mode
	elif (( $1 == 1 )); then
		echo '\_SB.PCI0.LPC0.EC0.BTSM' > /proc/acpi/call
		check=$(cat /proc/acpi/call | cut -d '' -f1)
	else
		# unexpected error!
		error 9
	fi

	if ! (( $check == $2 )); then
		error 3
	fi
}

#######################################
# Set battery mode
# Globals:
#   None
# Arguments:
#   Battery mode code (1,2,3)
# Outputs:
#   None
#######################################
function set_operation(){
	case $1 in

		0)
			# Intelligent Cooling 
			echo '\_SB_.GZFD.WMAA 0 0x2C 2' > /proc/acpi/call
			check_mode "0x0"
		;;

		1)
			# Extreme Performance 
 			echo '\_SB_.GZFD.WMAA 0 0x2C 3' > /proc/acpi/call
 			check_mode "0x1"
		;;

		2)
			# Battery Saving
			echo '\_SB_.GZFD.WMAA 0 0x2C 1' > /proc/acpi/call
			check_mode "0x2"
		;;

		*)
			error 9
		;;
	esac

}

#######################################
# Set battery charge mode
# Globals:
#   None
# Arguments:
#   Battery mode code (1,2,3,4)
# Outputs:
#   None
#######################################
function set_charge_operation(){
	case $1 in

		r1)
			# Rapid Charge On
			### deactivate the conservation mode
			echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x05' > /proc/acpi/call
			check_charge_mode 1 "0x0"
			### activate the rapid charge
			echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x07' > /proc/acpi/call
			check_charge_mode 0 "0x1"
		;;

		r0)
			# Rapid Charge Off 
 			echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x08' > /proc/acpi/call
 			check_charge_mode 0 "0x0"
		;;

		b1)
			# Battery Conservation On
			### deactivate the rapid charge
			echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x08' > /proc/acpi/call
 			check_charge_mode 0 "0x0"
 			### activate the conservation mode
			echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x03' > /proc/acpi/call
			check_charge_mode 1 "0x1"
		;;
		
		b0)
			# Battery Conservation Off
			echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x05' > /proc/acpi/call
			check_charge_mode 1 "0x0"
		;;

		*)
			error 9
		;;
	esac

}

#######################################
# Read battery mode
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Print battery mode name on STDOUT
#######################################
function read_operation(){
	echo '\_SB.PCI0.LPC0.EC0.GZ44' > /proc/acpi/call
	check=$(cat /proc/acpi/call | cut -d '' -f1)

	case $check in

		"0x0")
			echo "Intelligent Cooling"
		;;

		"0x1")
			echo "Extreme Performance"
		;;

		"0x2")
			echo "Battery Saving"
		;;

		*)
			error 4
		;;
	esac
	
}

#######################################
# Read battery charge mode
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Print battery charge mode names on STDOUT
#######################################
function read_charge_operation(){
	# rapid charge check
	echo '\_SB.PCI0.LPC0.EC0.FCGM' > /proc/acpi/call
	check=$(cat /proc/acpi/call | cut -d '' -f1)

	case $check in

		"0x0")
			echo "Rapid Charge Off"
		;;

		"0x1")
			echo "Rapid Charge On"
		;;

		*)
			error 5
		;;
	esac
	
	# battery conservation check
	echo '\_SB.PCI0.LPC0.EC0.BTSM' > /proc/acpi/call
	check=$(cat /proc/acpi/call | cut -d '' -f1)

	case $check in

		"0x0")
			echo "Battery Conservation Off"
		;;

		"0x1")
			echo "Battery Conservation On"
		;;

		*)
			error 5
		;;
	esac
}

# ----------------------------------------------------------------

check_sudo
setup


while [[ "$#" -gt 0 ]]; do
    case $1 in
        -s|--set)  
        	# set operation
        	
		# check if there is a parameter
		if [ ! -z "$2" ]; then 
			# if it's not numeric calls error
			if ! [[ $2 =~ ^[0-9]+$ ]]; then
				error 0
			fi
			
			# if the parameter is good, set param
	  		if (($2 >= 0 && $2 <= 2));  then
				set_operation $2
				
			# if it's not in the expected range calls error
			else 
				error 0
			fi
			shift
		
		# if there is no parameter calls error
		else
			error 0
		fi
        	shift
        	;;
        	
        -sc|--set-charge)  
        	# set charge operation
        
		# check if there is a parameter
		if [ ! -z "$2" ]; then 
						
			# if the parameter is good, set param
	  		if (($2 == r0 | $2 == r1 | $2 == b0 | $2 == b1));  then
				set_charge_operation $2
				
			# if it's not in the expected range calls error
			else 
				error 1
			fi
			shift
		
		# if there is no parameter calls error
		else 
			error 1
		fi
        	shift
        	;;
        	
        -h|--help)
        	# help
        	error 8
        	;;
        *) 
        	error 7
        	;;
    esac

done
read_charge_operation
read_operation
exit 0




